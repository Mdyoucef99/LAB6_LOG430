version: '3.8'

services:
  product-db:
    image: postgres:16
    container_name: lab7_product_db
    environment:
      POSTGRES_DB: product_db
      POSTGRES_USER: product_user
      POSTGRES_PASSWORD: product_password
    ports:
      - "5434:5432"
    volumes:
      - product_db_data:/var/lib/postgresql/data
      - ./db/product-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U product_user -d product_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  product-service:
    build: ./product-service
    ports:
      - "8081:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://product-db:5432/product_db
      SPRING_DATASOURCE_USERNAME: product_user
      SPRING_DATASOURCE_PASSWORD: product_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: product-db
      DB_PORT: 5432
    depends_on:
      product-db:
        condition: service_healthy

  inventory-db:
    image: postgres:16
    container_name: lab7_inventory_db
    environment:
      POSTGRES_DB: inventory_db
      POSTGRES_USER: inventory_user
      POSTGRES_PASSWORD: inventory_password
    ports:
      - "5436:5432"
    volumes:
      - inventory_db_data:/var/lib/postgresql/data
      - ./db/inventory-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U inventory_user -d inventory_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  inventory-service:
    build: ./inventory-service
    ports:
      - "8082:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://inventory-db:5432/inventory_db
      SPRING_DATASOURCE_USERNAME: inventory_user
      SPRING_DATASOURCE_PASSWORD: inventory_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: inventory-db
      DB_PORT: 5432
    depends_on:
      inventory-db:
        condition: service_healthy

  reporting-db:
    image: postgres:16
    container_name: lab7_reporting_db
    environment:
      POSTGRES_DB: reporting_db
      POSTGRES_USER: reporting_user
      POSTGRES_PASSWORD: reporting_password
    ports:
      - "5435:5432"
    volumes:
      - reporting_db_data:/var/lib/postgresql/data
      - ./db/reporting-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reporting_user -d reporting_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  reporting-service:
    build: ./reporting-service
    ports:
      - "8083:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://reporting-db:5432/reporting_db
      SPRING_DATASOURCE_USERNAME: reporting_user
      SPRING_DATASOURCE_PASSWORD: reporting_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: reporting-db
      DB_PORT: 5432
    depends_on:
      reporting-db:
        condition: service_healthy

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - product-service
      - inventory-service
      - reporting-service
      - customer-service
      - cart-service
      - order-service

  customer-db:
    image: postgres:16
    container_name: lab7_customer_db
    environment:
      POSTGRES_DB: customer_db
      POSTGRES_USER: customer_user
      POSTGRES_PASSWORD: customer_password
    ports:
      - "5438:5432"
    volumes:
      - customer_db_data:/var/lib/postgresql/data
      - ./db/customer-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U customer_user -d customer_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  customer-service:
    build: ./customer-service
    ports:
      - "8084:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://customer-db:5432/customer_db
      SPRING_DATASOURCE_USERNAME: customer_user
      SPRING_DATASOURCE_PASSWORD: customer_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: customer-db
      DB_PORT: 5432
    depends_on:
      customer-db:
        condition: service_healthy

  cart-db:
    image: postgres:16
    container_name: lab7_cart_db
    environment:
      POSTGRES_DB: cart_db
      POSTGRES_USER: cart_user
      POSTGRES_PASSWORD: cart_password
    ports:
      - "5439:5432"
    volumes:
      - cart_db_data:/var/lib/postgresql/data
      - ./db/cart-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U cart_user -d cart_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  cart-service:
    build: ./cart-service
    ports:
      - "8085:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://cart-db:5432/cart_db
      SPRING_DATASOURCE_USERNAME: cart_user
      SPRING_DATASOURCE_PASSWORD: cart_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: cart-db
      DB_PORT: 5432
    depends_on:
      cart-db:
        condition: service_healthy

  order-db:
    image: postgres:16
    container_name: lab7_order_db
    environment:
      POSTGRES_DB: order_db
      POSTGRES_USER: order_user
      POSTGRES_PASSWORD: order_password
    ports:
      - "5437:5432"
    volumes:
      - order_db_data:/var/lib/postgresql/data
      - ./db/order-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U order_user -d order_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Event Store Database
  event-store-db:
    image: postgres:16
    container_name: lab7_event_store_db
    environment:
      POSTGRES_DB: event_store_db
      POSTGRES_USER: event_store_user
      POSTGRES_PASSWORD: event_store_password
    ports:
      - "5440:5432"
    volumes:
      - event_store_db_data:/var/lib/postgresql/data
      - ./db/event-store-init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U event_store_user -d event_store_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Event Store Service
  event-store-service:
    build: ./event-store-service
    ports:
      - "8089:8089"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://event-store-db:5432/event_store_db
      SPRING_DATASOURCE_USERNAME: event_store_user
      SPRING_DATASOURCE_PASSWORD: event_store_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
    depends_on:
      event-store-db:
        condition: service_healthy

  # Order Service
  order-service:
    build: ./order-service
    ports:
      - "8086:8080"
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://order-db:5432/order_db
      SPRING_DATASOURCE_USERNAME: order_user
      SPRING_DATASOURCE_PASSWORD: order_password
      SPRING_DATASOURCE_DRIVER_CLASS_NAME: org.postgresql.Driver
      SPRING_PROFILES_ACTIVE: docker
      DB_HOST: order-db
      DB_PORT: 5432
    depends_on:
      order-db:
        condition: service_healthy

  # Saga Orchestrator Service (no DB needed)
  saga-orchestrator:
    build: ./saga-orchestrator-service
    ports:
      - "8087:8080"
    depends_on:
      - product-service
      - inventory-service
      - cart-service
      - order-service
      - rabbitmq

  # Notification Service (no DB needed)
  notification-service:
    build: ./notification-service
    ports:
      - "8088:8088"
    depends_on:
      - rabbitmq

  # API Gateway (no DB needed)
  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - product-service
      - inventory-service
      - reporting-service
      - customer-service
      - cart-service
      - order-service
      - saga-orchestrator
      - notification-service

  # Message Broker
  rabbitmq:
    image: rabbitmq:3-management
    container_name: lab7_rabbitmq
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Monitoring Services
  prometheus:
    image: prom/prometheus:latest
    container_name: lab7_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: lab7_grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  db_data:
  product_db_data:
  reporting_db_data:
  inventory_db_data:
  order_db_data:
  customer_db_data:
  cart_db_data:
  event_store_db_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data: 