@startuml

' Représentation des utilisateurs
actor "Client" as client

' Conteneur Docker pour l'API Gateway
node "Docker Host" {
  node "api-gateway (container)" {
    [api-gateway]
  }
  node "cart-service (container)" {
    [cart-service]
  }
  node "customer-service (container)" {
    [customer-service]
  }
  node "inventory-service (container)" {
    [inventory-service]
  }
  node "order-service (container)" {
    [order-service]
  }
  node "product-service (container)" {
    [product-service]
  }
  node "reporting-service (container)" {
    [reporting-service]
  }
  node "event-store-service (container)" {
    [event-store-service]
  }
  node "notification-service (container)" {
    [notification-service]
  }
  node "saga-orchestrator (container)" {
    [saga-orchestrator]
  }
  
  ' Message Broker
  node "rabbitmq (container)" {
    [RabbitMQ]
  }
  
  ' Bases de données multiples (Database-per-Service pattern)
  node "cart-db (container)" {
    database "PostgreSQL Cart"
  }
  node "customer-db (container)" {
    database "PostgreSQL Customer"
  }
  node "inventory-db (container)" {
    database "PostgreSQL Inventory"
  }
  node "order-db (container)" {
    database "PostgreSQL Order"
  }
  node "product-db (container)" {
    database "PostgreSQL Product"
  }
  node "reporting-db (container)" {
    database "PostgreSQL Reporting"
  }
  node "event-store-db (container)" {
    database "PostgreSQL Event Store"
  }
  
  ' Monitoring
  node "prometheus (container)" {
    [Prometheus]
  }
  node "grafana (container)" {
    [Grafana]
  }
}

' Flux de communication - API Gateway
client --> [api-gateway]
[api-gateway] --> [cart-service] : REST (8085)
[api-gateway] --> [customer-service] : REST (8084)
[api-gateway] --> [inventory-service]: REST (8082)
[api-gateway] --> [order-service]: REST (8086)
[api-gateway] --> [product-service]: REST (8081)
[api-gateway] --> [reporting-service]: REST (8083)
[api-gateway] --> [saga-orchestrator]: REST (8087)
[api-gateway] --> [notification-service]: REST (8088)
[api-gateway] --> [event-store-service]: REST (8089)

' Flux de communication - Saga Chorégraphiée via RabbitMQ
[order-service] --> [RabbitMQ] : OrderStartedEvent
[RabbitMQ] --> [cart-service] : OrderStartedEvent
[cart-service] --> [RabbitMQ] : CartValidatedEvent
[RabbitMQ] --> [inventory-service] : CartValidatedEvent
[inventory-service] --> [RabbitMQ] : StockReservedEvent
[RabbitMQ] --> [order-service] : StockReservedEvent
[order-service] --> [RabbitMQ] : OrderCreatedEvent
[RabbitMQ] --> [cart-service] : OrderCreatedEvent
[cart-service] --> [RabbitMQ] : CartClearedEvent

' Flux de communication - Saga Orchestrator (REST)
[saga-orchestrator] --> [cart-service] : REST
[saga-orchestrator] --> [inventory-service]: REST
[saga-orchestrator] --> [order-service]: REST

' Event Store - Stockage de tous les événements
[RabbitMQ] --> [event-store-service] : Tous les événements
[notification-service] --> [RabbitMQ] : Écoute des événements

' Connexions aux bases de données (Database-per-Service)
[cart-service] --> [PostgreSQL Cart]: JDBC
[customer-service] --> [PostgreSQL Customer]: JDBC
[inventory-service] --> [PostgreSQL Inventory]: JDBC
[order-service] --> [PostgreSQL Order]: JDBC
[product-service] --> [PostgreSQL Product]: JDBC
[reporting-service] --> [PostgreSQL Reporting]: JDBC
[event-store-service] --> [PostgreSQL Event Store]: JDBC

' Monitoring - Prometheus collecte les métriques
[Prometheus] --> [cart-service] 
[Prometheus] --> [customer-service] 
[Prometheus] --> [inventory-service] 
[Prometheus] --> [order-service]
[Prometheus] --> [product-service] 
[Prometheus] --> [reporting-service]
[Prometheus] --> [event-store-service]
[Prometheus] --> [notification-service]
[Prometheus] --> [saga-orchestrator]

' Grafana utilise Prometheus comme datasource
[Grafana] --> [Prometheus]: DataSource

' Note sur les patterns Saga
note right of [RabbitMQ]
  **Saga Chorégraphiée**
  - Communication asynchrone via RabbitMQ
  - Chaque service publie/écoute des événements
  - Gestion locale des compensations
  - Découplage maximal
end note

note right of [saga-orchestrator]
  **Saga Orchestrée**
  - Orchestration synchrone via REST
  - Gestion centralisée des compensations
  - Contrôle du flux de transaction
  - Métriques Prometheus
end note

' Note sur le pattern Database-per-Service
note right of [PostgreSQL Cart]
  **Database-per-Service Pattern**
  - Chaque service a sa propre DB
  - Isolation des données
  - Indépendance de déploiement
  - Pas de couplage entre services
end note

' Note sur l'Event Store
note right of [event-store-service]
  **Event Store**
  - Stockage de tous les événements
  - Audit trail complet
  - Relecture d'événements
  - Versioning des agrégats
end note

@enduml